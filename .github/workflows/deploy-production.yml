name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install Backend Dependencies
      run: |
        cd server
        npm ci
    
    - name: Install Frontend Dependencies
      run: |
        cd client
        npm ci
    
    - name: Run Backend Tests
      run: |
        cd server
        npm test --if-present
      env:
        NODE_ENV: test
        MONGO_URI: ${{ secrets.MONGO_URI_TEST }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
    
    - name: Run Frontend Tests
      run: |
        cd client
        npm test -- --coverage --watchAll=false
      env:
        CI: true
    
    - name: Build Frontend
      run: |
        cd client
        npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL_PROD }}

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy Backend to Render
      run: |
        curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}
    
    - name: Wait for Backend Deployment
      run: sleep 60
    
    - name: Health Check Backend
      run: |
        curl -f ${{ secrets.BACKEND_URL }}/api/health || exit 1

  deploy-frontend:
    needs: [test, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install and Build Frontend
      run: |
        cd client
        npm ci
        npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL_PROD }}
    
    - name: Deploy to Vercel
      uses: vercel/action@v1
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./client
        vercel-args: '--prod'

  notify:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Deployment Status
      run: |
        if [[ "${{ needs.deploy-backend.result }}" == "success" && "${{ needs.deploy-frontend.result }}" == "success" ]]; then
          echo "✅ Production deployment successful!"
        else
          echo "❌ Production deployment failed!"
          exit 1
        fi